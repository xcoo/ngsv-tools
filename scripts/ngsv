#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
#   ngsv-console
#   http://github.com/xcoo/ngsv-console
#   Copyright (C) 2013, Xcoo, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = 'Xcoo, Inc.'

import argparse
import logging
import os
from pkg_resources import resource_string
import re
import tempfile

import ngsvtools.samloader
import ngsvtools.histogramloader
import ngsvtools.bedloader
import ngsvtools.cytobandloader
import ngsvtools.refgeneloader
import ngsvtools.cnvloader
from ngsvtools.sam.data.sql import SQLDB


def initdb(args):
    _setup_logging(args.loglevel)

    sql = resource_string('ngsvtools', 'data/ngsv.sql')
    _source(sql, args.dbuser, args.dbpassword)

    sql = resource_string('ngsvtools', 'data/cnv.sql')
    _source(sql, args.dbuser, args.dbpassword)


def _source(sql, dbuser, dbpassword):
    fd, path = tempfile.mkstemp()
    os.write(fd, sql)
    os.close(fd)
    cmd = 'mysql --user=%s --password=%s < %s' % (dbuser,
                                                  dbpassword,
                                                  path)
    os.system(cmd)
    os.remove(path)


def loadsam(args):
    _setup_logging(args.loglevel)
    db = SQLDB(args.dbname, args.dbhost, args.dbuser, args.dbpassword)
    for f in args.samfile:
        ngsvtools.samloader.load(f, db)
        ngsvtools.histogramloader.load(f, db)


def loadbed(args):
    _setup_logging(args.loglevel)
    db = SQLDB(args.dbname, args.dbhost, args.dbuser, args.dbpassword)
    for f in args.bedfile:
        ngsvtools.bedloader.load(f, db)


def loadcytoband(args):
    _setup_logging(args.loglevel)
    db = SQLDB(args.dbname, args.dbhost, args.dbuser, args.dbpassword)
    ngsvtools.cytobandloader.load(db)


def loadrefgene(args):
    _setup_logging(args.loglevel)
    db = SQLDB(args.dbname, args.dbhost, args.dbuser, args.dbpassword)
    ngsvtools.refgeneloader.load(db)


def _setup_logging(args_loglevel):
    loglevel = logging.INFO
    p = re.compile(args_loglevel, re.IGNORECASE)
    if p.match('debug') is not None:
        loglevel = logging.DEBUG
    elif p.match('info') is not None:
        loglevel = logging.INFO
    elif p.match('warning') is not None:
        loglevel = logging.WARNING
    elif p.match('error') is not None:
        loglevel = logging.ERROR
    elif p.match('critical') is not None:
        loglevel = logging.CRITICAL
    elif p.match('fatal') is not None:
        loglevel = logging.FATAL
    logging.basicConfig(level=loglevel)


def _add_share_arguments(parser):
    parser.add_argument('--loglevel', default='INFO',
                        help='Logging level, choose between DEBUG, INFO, WARNING, ERROR, CRITICAL, or FATAL')
    parser.add_argument('--dbhost', default='127.0.0.1',
                        help="Host of MySQL server (default: '127.0.0.1')")
    parser.add_argument('--dbuser', default='root',
                        help="User of MySQL server (default: 'root')")
    parser.add_argument('--dbpassword', default='password',
                        help="Password of MySQL server (default: 'password')")
    parser.add_argument('--dbname', default='ngsv',
                        help="Database name (default: 'ngsv')")

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser_initdb = subparsers.add_parser('initdb', help='Initialize MySQL DB')
    _add_share_arguments(parser_initdb)
    parser_initdb.set_defaults(func=initdb)

    parser_sam = subparsers.add_parser('loadsam', help='Load sam/bam file')
    _add_share_arguments(parser_sam)
    parser_sam.add_argument('samfile', nargs='+', help='sam/bam files')
    parser_sam.set_defaults(func=loadsam)

    parser_bed = subparsers.add_parser('loadbed', help='Load bed file')
    _add_share_arguments(parser_bed)
    parser_bed.add_argument('bedfile', nargs='+', help='bed files')
    parser_bed.set_defaults(func=loadbed)

    parser_cytoband = subparsers.add_parser('loadcytoband',
                                            help='Load cytoband')
    _add_share_arguments(parser_cytoband)
    parser_cytoband.set_defaults(func=loadcytoband)

    parser_refgene = subparsers.add_parser('loadrefgene', help='Load refgene')
    _add_share_arguments(parser_refgene)
    parser_refgene.set_defaults(func=loadrefgene)

    parser_cnv = subparsers.add_parser('loadcnv', help='Load cnv file')
    _add_share_arguments(parser_cnv)
    parser_cnv.add_argument('cnvfile', nargs='+', help='cnv files')
    parser_cnv.set_defaults(func=loadcnv)

    args = parser.parse_args()
    args.func(args)
